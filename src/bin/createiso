#!/bin/bash

#
# Copyright (C) 2015 Nethesis S.r.l.
# http://www.nethesis.it - support@nethesis.it
# 
# This script is part of NethServer.
# 
# NethServer is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License,
# or any later version.
# 
# NethServer is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with NethServer.  If not, see <http://www.gnu.org/licenses/>.
#

# Check if tools are available:
for P in fuseiso fusermount mkisofs mock implantisomd5; do
    which $P >/dev/null 2>&1 || { echo "Missing '$P' executable!"; exit 1; }
done

if ! [ -f /usr/share/syslinux/hdt.c32 ]; then
    echo "Could not find /usr/share/syslinux/hdt.c32: missing syslinux package?";
    exit 1;
fi

USER_GROUPS=$(groups)

if [[ "${USER_GROUPS}" != *"fuse"* ]]; then
    echo "You must be member of fuse group!" 1>&2;
    exit 1;
fi

if [[ "${USER_GROUPS}" != *"mock"* ]]; then
    echo "You must be member of mock group!" 1>&2;
    exit 1;
fi


# Assign fallback values, for undefined parameters:
WORKDIR=$(pwd)
COMPS_TMP=`mktemp -u --tmpdir=${WORKDIR} comps.XXXXXX`
export LANG=C
ISO_LIB=${ISO_LIB:-/usr/share/nethserver-createiso}

set -e

function exit_error {
   echo $1 >&2
   exit 1
}

function help {
   echo "Usage: $0 -i input.iso -n product_name -v product_version" >&2
   echo '
             -i input.is          : The CentOS minimal ISO file
             -n product_name      : The first part of the output file name
             -v product_version   : major.minor[-release] 
' >&2
}

function prepare_clone_iso {
    local iso_file=$1
    local iso_mount=$2
    local iso_clone=$3

    echo "Mounting ISO image $iso_file ..."
    fuseiso $iso_file $iso_mount
    echo "Copying ISO contents ..."
    rsync -a $iso_mount/ $iso_clone/
    echo "Setting write permissions on $iso_clone..."
    chmod -R u+w $iso_clone
}


while getopts "i:n:v:h" opt; do
    case $opt in
	i)
	    INPUT_ISO=$OPTARG
	    [ -z "${INPUT_ISO}" ] && exit_error "No input iso file given"
	    ;;
	n)
	    PRODUCT_NAME=$OPTARG
	    ;;
	v)
	    PRODUCT_VERSION=$OPTARG
	    ;;
	h)
	    help
	    exit 0
	    ;;
	\?)
	    help
	    exit_error "Invalid option: -$OPTARG"
	    ;;
    esac
done

if [ -z "${PRODUCT_NAME}" ]; then
    help
    exit_error "Missing product_name argument"
fi
if [ -z "${PRODUCT_VERSION}" ]; then
    help
    exit_error "Missing product_version argument"
fi

PRODUCT_ARCH=${PRODUCT_ARCH:-x86_64}
PRODUCT_NAME=$(echo ${PRODUCT_NAME} | tr '[:upper:]' '[:lower:]')
PRODUCT_VERSION=$(echo ${PRODUCT_VERSION} | tr '[:upper:]' '[:lower:]')
BRAND_DIR=${ISO_LIB}/${PRODUCT_NAME}
if [ ! -d "${BRAND_DIR}" ]; then
    BRAND_DIR=${ISO_LIB}/nethserver
fi

mock_config=${BRAND_DIR}/mock_config
if [ -f "${BRAND_DIR}/mock_config" ]; then
    mock_config=$(cat "${BRAND_DIR}/mock_config")
else 
    exit_error "Missing ${BRAND_DIR}/mock_config file"
fi

echo "Using the following parameters:
   * Product name: ${PRODUCT_NAME}
   * Product version: ${PRODUCT_VERSION}
   * Product arch: ${PRODUCT_ARCH}
   * Mock configuration: ${mock_config}
"

if ! [ -r "${INPUT_ISO}" ]; then
    exit_error "Could not read input iso file ${INPUT_ISO}."
fi

# Temporary directories:
MOUNT_ISO=`mktemp -d --tmpdir=${WORKDIR} mnt.XXXXXX`
CLONE_ISO=`mktemp -d --tmpdir=${WORKDIR} iso.XXXXXX`

function cleanup_temporary_files {
    echo "Cleaning up temporary files..."
    fusermount -q -u ${MOUNT_ISO}
    [ -d ${MOUNT_ISO} ] && rmdir ${MOUNT_ISO}
    [ -d ${CLONE_ISO} ] && rm -rf ${CLONE_ISO}
    [ -f ${COMPS_TMP} ] && rm ${COMPS_TMP}
    mock -r ${mock_config} --clean
}

trap cleanup_temporary_files EXIT SIGTERM

prepare_clone_iso ${INPUT_ISO} ${MOUNT_ISO} ${CLONE_ISO}

echo "Creating ISO directories..."
mkdir -vp ${CLONE_ISO}/{isolinux,ks,extras}

echo "Installing yum-plugin-downloadonly..."
mock -r ${mock_config} --install yum-plugin-downloadonly

if [ -f ${BRAND_DIR}/brand_packages ]; then
   brand_packages=$(cat ${BRAND_DIR}/brand_packages)
fi
echo "Ignoring errors from yum downloadonly:"
echo "  * Installing @nethserver-iso and ${brand_packages}..."
mock -r ${mock_config} --yum-cmd -- --downloadonly --downloaddir=${CLONE_ISO}/extras install @nethserver-iso ${brand_packages} || :

echo "Extracting nethserver-base yum groups metadata..."
mock -r nethserver-iso-6.6-x86_64 --copyout /var/cache/yum/nethserver-base/gen/groups.xml ${COMPS_TMP}

echo "Creating yum repository..."
createrepo -g ${COMPS_TMP} ${CLONE_ISO}/extras/

echo "Copying GPG keys..."
cp -v $ISO_LIB/RPM-GPG-KEY-* ${CLONE_ISO}/

echo "Copying brand files..."
cp -v $BRAND_DIR/splash.jpg ${CLONE_ISO}/isolinux/

echo "Updating isolinux configuration..."
sed "s/_NSRVRELEASE_/$PRODUCT_VERSION/" $ISO_LIB/isolinux.cfg > ${CLONE_ISO}/isolinux/isolinux.cfg

echo "Copying syslinux hardware detection tool..."
cp -v /usr/share/syslinux/hdt.c32 ${CLONE_ISO}/isolinux/

echo "Copying kickstart files..."
cat ${ISO_LIB}/ks/{start.ks,installer,end.ks} > ${CLONE_ISO}/ks/ks-interactive.cfg
cat ${ISO_LIB}/ks/ks-unattended.cfg > ${CLONE_ISO}/ks/ks-unattended.cfg

OUTPUT_ISO="${WORKDIR}/${PRODUCT_NAME}-${PRODUCT_VERSION}-${PRODUCT_ARCH}.iso"
echo "Creating ${OUTPUT_ISO} ..."
mkisofs -o ${OUTPUT_ISO} -b isolinux/isolinux.bin -c isolinux/boot.cat -no-emul-boot -boot-load-size 4 -boot-info-table -R -v -J -T -V "${PRODUCT_NAME}" ${CLONE_ISO}

echo "Implanting ISO checksum..."
implantisomd5 --force "${OUTPUT_ISO}"

echo "Executing isohybrid..."
/usr/bin/isohybrid ${OUTPUT_ISO}

echo "*" 
echo "* DONE. Written ISO file:"
echo "*   ${OUTPUT_ISO}"
echo "*"

