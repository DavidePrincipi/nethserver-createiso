#!/usr/bin/python

import os
import sys
import glob
import atexit
import traceback
from glob import glob
from snack import *

lang = 'en_US'
screen  = 0
config = {}
defaults = {}
messages = {}
languages = {}

languages['Italiano'] = 'it';
languages['English'] = 'en_US';

messages['en_US'] = {
    'NEXT' : 'Next',
    'BACK' : 'Back',
    'ABORT' : 'Abort',
    'INSTALL' : 'Install',
    'OK' : 'Ok',
    'YES' : 'Yes',
    'NO' : 'No',
    'NODISK_ERR' : 'No disk found!',
    'ABORT_INSTALL' : 'Aborting installation',

    'LANG_TITLE' : 'NethServer installation',
    'LANG_DESC' : 'Welcome to NethServer installation!\n\nChoose a system language', 

    'RAID_TITLE' : 'Software RAID',
    'RAID_DESC' : 'Enable software RAID?',
    'RAID_LEVEL_TITLE' : 'RAID level',
    'RAID_2_DISKS' : 'Creating RAID 1 on: %s',
    'RAID_LEVEL_DESC' : 'Installation disks: %s\n\nChoose a RAID level',
    'RAID_SPARE_TITLE' : 'Enable spare disk',
    'RAID_SPARE' : 'Reserve one disk as hot-spare?',

    'NETINTERFACES_TITLE' : 'Network interfaces',
    'NETINTERFACES_DESC' : 'Choose LAN (green) network interface',

    'NETWORK_TITLE' : 'Network configuration',
    'NETWORK_DESC' : 'Paramaters for network interface: %s',
    'FQDN' : 'Host and domain name',
    'IPADDR' : 'IP address',
    'NETMASK' : 'Netmask',
    'GATEWAY' : 'Gateway',
    'DNS' : 'DNS server',

    'END_TITLE' : 'Configuration end',
    'END_DESC' : 'Root password is: Nethesis,1234\n\nWARNING! All listed disks will be formatted: %s\n\nPress the "Install" button to start installation process'
}
defaults['en_US'] = { 'keyboard': 'us', 'timezone' : 'Greenwich' }

messages['it'] = {
    'NEXT' : 'Avanti',
    'BACK' : 'Indietro',
    'ABORT' : 'Annulla',
    'INSTALL' : 'Installa',
    'OK' : 'Ok',
    'YES' : 'Si',
    'NO' : 'No',
    'NODISK_ERR' : 'Nessun disco trovato!',
    'ABORT_INSTALL' : 'Installazione annullata',

    'LANG_TITLE' : 'Installazione NethServer',
    'LANG_DESC' : 'Benvenuti nell\'installazione di NethServer!\n\nScegliere la lingua di sistema', 

    'KEYBOARD_TITLE' : 'Layout tastiera',
    'KEYBOARD_DESC' : 'Inserire il layout della tastiera',
    'KEYBOARD_LBL' : 'Layout',

    'RAID_TITLE' : 'RAID software',
    'RAID_DESC' : 'Abilitare il RAID software?',
    'RAID_LEVEL_TITLE' : 'Tipo RAID',
    'RAID_2_DISKS' : 'Verra\' creato un RAID 1 su: %s',
    'RAID_LEVEL_DESC' : 'Dischi di destinazione: %s\n\nScegliere il tipo di RAID',
    'RAID_SPARE_TITLE' : 'Abilita disco spare',
    'RAID_SPARE' : 'Riservare un disco come hot-spare?',

    'NETINTERFACES_TITLE' : 'Interfacce di rete',
    'NETINTERFACES_DESC' : 'Scegliere l\'interfaccia per la LAN (rete verde)',

    'NETWORK_TITLE' : 'Configurazione di rete',
    'NETWORK_DESC' : 'Parametri per l\'interfaccia di rete: %s',
    'FQDN' : 'Nome host e dominio',
    'IPADDR' : 'Indirizzo IP',
    'NETMASK' : 'Netmask',
    'GATEWAY' : 'Gateway',
    'DNS' : 'Server DNS',

    'END_TITLE' : 'Configurazione terminata',
    'END_DESC' : 'Password dell\'utente root: Nethesis,1234\n\nATTENZIONE! I seguenti dischi verranno formattati: %s\n\nPremere il pulsante "Installa" per iniziare l\'installazione'

}
defaults['it'] = { 'keyboard' : 'it', 'timezone' : 'Europe/Rome' }


def debug(screen, msg):
    screen.suspend()
    print msg
    raw_input()
    screen.resume()

def get_default(key):
    try:
        return defaults[lang][key]
    except:
        return ''

def T(msg):
    global lang
    try:
        return messages[lang][msg]
    except:
        return msg

def get_devices():
    try:
        import parted
        ret = []
        devices = parted.getAllDevices()
        devices = [d for d in devices if d.type != parted.DEVICE_DM and not d.path.startswith('/dev/sr')]
        for dev in devices:
            path = dev.path[5:] if dev.path.startswith('dev') else dev.path
            ret.append(path)
        ret.sort()
        return ret
    except:
        return [ 
            '/dev/sda',
            '/dev/sdb',
            '/dev/sdc',
            '/dev/sdd',
        ]

def get_interfaces():
    interfaces = []
    for f in glob('/sys/class/net/*'):
        d = f.split('/')[4];
        if d != 'lo':
            interfaces.append(d)
    return interfaces

def write_include(file, text):
    with open(file, "a") as fh:
        fh.write(text)
        fh.write('\n')

def write_config():
    global config

    try:
        with open ("/tmp/root-encrypt", "r") as file:
            encrypt=file.read().replace('\n', '')
    except:
         encrypt=''

    write_include('/tmp/keyboard-include', 'keyboard %s' % get_default('keyboard'))
    write_include('/tmp/lang-include', 'lang en_US')
    write_include('/tmp/timezone-include', 'timezone --utc %s' % get_default('timezone'))
    write_include('/tmp/password-include', 'rootpw --plaintext \'Nethesis,1234\'')
    write_include('/tmp/rootfs-include', 'volgroup VolGroup pv.1')
    write_include('/tmp/rootfs-include', 'logvol swap --fstype swap --name=lv_swap --vgname=VolGroup --recommended --maxsize=6000')
    write_include('/tmp/rootfs-include', 'logvol / --fstype ext4 --name=lv_root --vgname=VolGroup --size=5000 --grow %s' % encrypt)
    write_include('/tmp/network-include', 'network --bootproto=static \
        --ip=%s \
        --netmask=%s \
        --gateway=%s \
        --nameserver=%s \
        --device=%s \
        --hostname=%s \
        --onboot=yes' % (config['ipaddr'], config['netmask'], config['gateway'], config['dns'], config['interface'], config['hostname']) )
    # disable all other interfaces
    for interface in get_interfaces():
        if (interface != config['interface']):
            write_include('/tmp/network-include', 'network --bootproto=static --onboot=no --device=%s' % interface)

    if config['raid'] == 0 or len(config['targets']) == 1: # no raid
        write_include('/tmp/part-include','part /boot --fstype ext3 --size 512')
        write_include('/tmp/part-include','part pv.1 --asprimary --fstype=\'physical volume (LVM)\' --ondisk=%s --size=5000 --grow' % config['targets'][0])
    if config['raid'] == 1:
        d = 0
        raid_boot = []
        raid_root = []
        for disk in config['targets']:
             raid_boot.append('raid.%s%s' % (d,0))
             raid_root.append('raid.%s%s' % (d,1))
             d = d + 1
      
        for i in range(len(raid_boot)): 
            write_include('/tmp/part-include','part %s --asprimary --fstype=\'raid\' --ondisk=%s --size=512' % (raid_boot[i], config['targets'][i]))
            write_include('/tmp/part-include','part %s --asprimary --fstype=\'raid\' --ondisk=%s --size=5000 --grow' % (raid_root[i], config['targets'][i]))

        write_include('/tmp/part-include','raid /boot --device=md1 --fstype=\'ext3\' --level=1 %s %s' % (config['spare'], ' '.join(raid_boot)))
        write_include('/tmp/part-include','raid pv.1 --device=md2 --fstype=\'physical volume (LVM)\' --level=%s %s %s' % (config['raid_level'],config['spare'],' '.join(raid_root)))

    write_include('/tmp/bootloader-include','bootloader --location=mbr --driveorder="%s" --append=" rhgb crashkernel=auto quiet"' % ','.join(config['targets']))

   
    sys.exit(0)

def end_page():
    global config
    if config['raid'] == 0:
        label = T('END_DESC') % config['targets'][0]
    else:
        label = T('END_DESC') % ' '.join(config['targets'])
    button = ButtonChoiceWindow(
        screen,
        title = T('END_TITLE'),
        text = label,
        buttons = [(T('INSTALL'), 0), (T('BACK'), 1),  (T('ABORT'), 2)]
    )

    if button == 0:
        write_config()
    elif button == 2:
        sys.exit(1)
    else:
        netinterfaces_page()

def netinterfaces_page():
    global config
    interfaces = get_interfaces()
    (button, interface) = ListboxChoiceWindow(
            screen,
            T('NETINTERFACES_TITLE'),
            T('NETINTERFACES_DESC'),
            interfaces,
            buttons = [(T('NEXT'), 0), (T('BACK'), 1)],
            scroll = 0,
            height = 2
    )
    if button == 0:
        config['interface'] = interfaces[interface]
        network_page()
    elif button == 1:
        raid_page()
    else:
        netinterfaces_page()


def network_page():
    global config
    button, (hostname, ipaddr, netmask, gateway, dns) = EntryWindow(screen,
        T('NETWORK_TITLE'), T('NETWORK_DESC') % config['interface'], [
        (T('FQDN'), Entry(30, 'server.example.org')),
        (T('IPADDR'), Entry(30, '192.168.1.1')),
        (T('NETMASK'), Entry(30, '255.255.255.0')),
        (T('GATEWAY'), Entry(30, '192.168.1.253')),
        (T('DNS'), Entry(30, '8.8.8.8')),
    ], buttons=[(T('NEXT'), 0), (T('BACK'), 1)])

    if button == 0:
        config['hostname'] = hostname
        config['ipaddr'] = ipaddr
        config['netmask'] = netmask
        config['gateway'] = gateway
        config['dns'] = dns
        end_page()
    else:
        netinterfaces_page()
    

def raid_page():
    devices = get_devices()
    if len(devices) <= 0:
        button = ButtonChoiceWindow(
            screen,
            title = T('NODISK_ERR'),
            text = T('ABORT_INSTALL'),
            buttons = [(T('ABORT'), 2)]
        )
    elif len(devices) == 1: # skip raid configuration
        config['raid'] = 0
        config['raid_level'] = 0
        config['targets'] = devices
        netinterfaces_page()
    else:
        button = ButtonChoiceWindow(
            screen,
            title = T('RAID_TITLE'),
            text = T('RAID_DESC'),
            buttons = [(T('YES'), 0), (T('NO'), 1), (T('BACK'), 3)]
        )   
            
    if button == 0:
        config['raid'] = 1
        raid_level_page()
    if button == 2:
        sys.exit(1)
    if button == 3:
        lang_page()
    else:
        config['raid'] = 0
        config['targets'] = devices
        netinterfaces_page()

        
def raid_level_page():
    global config
    cboxes = []
    targets = []
    devices = get_devices()
    config['spare'] = ''

    if len(devices) == 2:
        targets = devices[:2]
        button = ButtonChoiceWindow(
            screen,
            title = T('RAID_LEVEL_TITLE'),
            text = T('RAID_2_DISKS') % ','.join(targets),
            buttons = [(T('NEXT'), 0), (T('BACK'), 1)]
        )
        config['raid_level'] = 1

    elif len(devices) >= 3:
        targets = devices
        levels = ['1','5']
        (button, raid_level) = ListboxChoiceWindow(
            screen,
            T('RAID_LEVEL_TITLE'),
            T('RAID_LEVEL_DESC')  % ','.join(targets),
            levels,
            buttons = [(T('NEXT'), 0), (T('BACK'), 1)],
            scroll = 0,
            height = 2
        )
        config['raid_level'] = levels[raid_level]
        if button == 1:
            raid_page()
        # spare disk
        if (config['raid_level'] == '1' and len(devices) > 2) or (config['raid_level'] == '5' and len(devices) > 3):
            button = ButtonChoiceWindow(
                screen,
                title = T('RAID_SPARE_TITLE'),
                text = T('RAID_SPARE'),
                buttons = [(T('YES'), 0), (T('NO'), 1)]
            )
            if button == 0:
                config['spare'] = '--spares=1'
            else:
                button = 0 # go to next page
       
        
    if button == 0:
        config['targets'] = targets
        netinterfaces_page()
    if button == 2:
        sys.exit(1)
    else:
        raid_page()

def lang_page():
    global config
    global lang
    (button, language) = ListboxChoiceWindow(
        screen,
        T('LANG_TITLE'),
        T('LANG_DESC'),
        languages.keys(),
        buttons = [(T('NEXT'), 0), (T('BACK'), 1)],
        height = len(messages.keys())
    )
    if button == 0:
        config['language'] = languages[languages.keys()[language]]
        lang  = languages[languages.keys()[language]]
        raid_page()
    else:
        lang_page()

def main():
    global screen
    screen = SnackScreen()

    # comment this line if you need to debug any error
    atexit.register(screen.finish)

    screen.drawRootText(0, 0, "NethServer")

    copyright_text = " 2014 NethServer, http://www.nethserver.org"
    copyright_pad = screen.width - len(copyright_text)
    screen.drawRootText(copyright_pad, 0, copyright_text)

    while True:
        lang_page()

        try:
            screen.popWindow()
        except:
            ButtonChoiceWindow(screen, "Traceback",
                traceback.format_exc(), buttons = [T('Ok')])
            # debug
            # screen.finish()
            # traceback.print_exc()
            # sys.exit(1)

if __name__ == '__main__':
    sys.exit(main())
